package rom

import (
	"bytes"
	"io"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNeedsDirectChecksum(t *testing.T) {
	assert.Equal(t, true, needsDirectChecksum("test.nes"))
	assert.Equal(t, false, needsDirectChecksum("test.bin"))
}

func TestChecksumFunction(t *testing.T) {
	tables := map[string]struct {
		filename string
		got      []byte
		checksum Checksum
		want     []byte
		err      error
	}{
		"CRC32": {
			"test.bin",
			[]byte{0x01, 0x02, 0x03, 0x04},
			CRC32,
			[]byte{0xb6, 0x3c, 0xfb, 0xcd},
			nil,
		},
		"MD5": {
			"test.bin",
			[]byte{0x01, 0x02, 0x03, 0x04},
			MD5,
			[]byte{0x08, 0xd6, 0xc0, 0x5a, 0x21, 0x51, 0x2a, 0x79, 0xa1, 0xdf, 0xeb, 0x9d, 0x2a, 0x8f, 0x26, 0x2f},
			nil,
		},
		"SHA1": {
			"test.bin",
			[]byte{0x01, 0x02, 0x03, 0x04},
			SHA1,
			[]byte{0x12, 0xda, 0xda, 0x1f, 0xff, 0x4d, 0x47, 0x87, 0xad, 0xe3, 0x33, 0x31, 0x47, 0x20, 0x2c, 0x3b, 0x44, 0x3e, 0x37, 0x6f},
			nil,
		},
		"Unknown": {
			"test.bin",
			[]byte{0x01, 0x02, 0x03, 0x04},
			Checksum(3),
			[]byte{},
			errUnknownChecksum,
		},
		"NES no header": {
			"test.nes",
			[]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
			CRC32,
			[]byte{0xce, 0xce, 0xe2, 0x88},
			nil,
		},
		"NES header": {
			"test.nes",
			[]byte{'N', 'E', 'S', 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04},
			CRC32,
			[]byte{0xb6, 0x3c, 0xfb, 0xcd},
			nil,
		},
		"NES short": {
			"test.nes",
			[]byte{0x01, 0x02, 0x03, 0x04},
			CRC32,
			[]byte{},
			io.EOF,
		},
	}

	for name, table := range tables {
		t.Run(name, func(t *testing.T) {
			b := bytes.NewBuffer(table.got)
			want, err := checksumFunction(table.filename)(b, table.checksum)
			assert.Equal(t, table.err, err)
			if err == nil {
				assert.Equal(t, table.want, want)
			}
		})
	}
}
